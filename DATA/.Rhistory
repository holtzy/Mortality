dist=dist(data[ , c(4:8)] , diag=TRUE)
#
specific_leaf <- dhc[[1]][[1]][[1]]
specific_leaf
attributes(specific_leaf)
# Build dataset (just copy and paste, this is NOT interesting)
sample <- paste(rep("sample_",24) , seq(1,24) , sep="")
specie <- c(rep("dicoccoides" , 8) , rep("dicoccum" , 8) , rep("durum" , 8))
treatment <- rep(c(rep("High",4 ) , rep("Low",4)),3)
data <- data.frame(sample,specie,treatment)
for (i in seq(1:5)){
gene=sample(c(1:40) , 24 )
data=cbind(data , gene)
colnames(data)[ncol(data)]=paste("gene_",i,sep="")
}
data[data$treatment=="High" , c(4:8)]=data[data$treatment=="High" , c(4:8)]+100
data[data$specie=="durum" , c(4:8)]=data[data$specie=="durum" , c(4:8)]-30
rownames(data) <- data[,1]
# Have a look to the dataset
# head(data)
# Compute Euclidean distance between samples
dist=dist(data[ , c(4:8)] , diag=TRUE)
# Perfor clustering with hclust
hc <- hclust(dist)
dhc <- as.dendrogram(hc)
# Actually, each leaf of the tree has several attributes, like the color, the shape.. Have a look to it:
specific_leaf <- dhc[[1]][[1]][[1]]
# specific_leaf
# attributes(specific_leaf)
#So if I Want to color each leaf of the Tree, I have to change the attribute of each leaf. This can be done using the dendrapply function. So I create a function that # # add 3 attributes to the leaf : one for the color (“lab.col”) ,one for the font “lab.font” and one for the size (“lab.cex”).
i=0
colLab<<-function(n){
if(is.leaf(n)){
#I take the current attributes
a=attributes(n)
#I deduce the line in the original data, and so the treatment and the specie.
ligne=match(attributes(n)$label,data[,1])
treatment=data[ligne,3];
if(treatment=="Low"){col_treatment="blue"};if(treatment=="High"){col_treatment="red"}
specie=data[ligne,2];
if(specie=="dicoccoides"){col_specie="red"};if(specie=="dicoccum"){col_specie="Darkgreen"};if(specie=="durum"){col_specie="blue"}
#Modification of leaf attribute
attr(n,"nodePar")<-c(a$nodePar,list(cex=1.5,lab.cex=1,pch=20,col=col_treatment,lab.col=col_specie,lab.font=1,lab.cex=1))
}
return(n)
}
# Build dataset (just copy and paste, this is NOT interesting)
sample <- paste(rep("sample_",24) , seq(1,24) , sep="")
specie <- c(rep("dicoccoides" , 8) , rep("dicoccum" , 8) , rep("durum" , 8))
treatment <- rep(c(rep("High",4 ) , rep("Low",4)),3)
data <- data.frame(sample,specie,treatment)
for (i in seq(1:5)){
gene=sample(c(1:40) , 24 )
data=cbind(data , gene)
colnames(data)[ncol(data)]=paste("gene_",i,sep="")
}
data[data$treatment=="High" , c(4:8)]=data[data$treatment=="High" , c(4:8)]+100
data[data$specie=="durum" , c(4:8)]=data[data$specie=="durum" , c(4:8)]-30
rownames(data) <- data[,1]
# Have a look to the dataset
# head(data)
# Compute Euclidean distance between samples
dist=dist(data[ , c(4:8)] , diag=TRUE)
# Perfor clustering with hclust
hc <- hclust(dist)
dhc <- as.dendrogram(hc)
# Actually, each leaf of the tree has several attributes, like the color, the shape.. Have a look to it:
specific_leaf <- dhc[[1]][[1]][[1]]
# specific_leaf
# attributes(specific_leaf)
#So if I Want to color each leaf of the Tree, I have to change the attribute of each leaf. This can be done using the dendrapply function. So I create a function that # # add 3 attributes to the leaf : one for the color (“lab.col”) ,one for the font “lab.font” and one for the size (“lab.cex”).
i=0
colLab<<-function(n){
if(is.leaf(n)){
#I take the current attributes
a=attributes(n)
#I deduce the line in the original data, and so the treatment and the specie.
ligne=match(attributes(n)$label,data[,1])
treatment=data[ligne,3];
if(treatment=="Low"){col_treatment="blue"};if(treatment=="High"){col_treatment="red"}
specie=data[ligne,2];
if(specie=="dicoccoides"){col_specie="red"};if(specie=="dicoccum"){col_specie="Darkgreen"};if(specie=="durum"){col_specie="blue"}
#Modification of leaf attribute
attr(n,"nodePar")<-c(a$nodePar,list(cex=1.5,lab.cex=1,pch=20,col=col_treatment,lab.col=col_specie,lab.font=1,lab.cex=1))
}
return(n)
}
# Finally I just have to apply this to my dendrogram
dL <- dendrapply(dhc, colLab)
# And the plot
plot(dL , main="structure of the population")
legend("topright",
legend = c("High Nitrogen" , "Low Nitrogen" , "Durum" , "Dicoccoides" , "Dicoccum"),
col = c("red", "blue" , "blue" , "red" , "Darkgreen"),
pch = c(20,20,4,4,4), bty = "n",  pt.cex = 1.5, cex = 0.8 ,
text.col = "black", horiz = FALSE, inset = c(0.1, 0.1))
legend("topright",
legend = c("High Nitrogen" , "Low Nitrogen" , "Durum" , "Dicoccoides" , "Dicoccum"),
col = c("red", "blue" , "blue" , "red" , "Darkgreen"),
pch = c(20,20,4,4,4), bty = "n",  pt.cex = 1.5, cex = 0.8 ,
text.col = "black", horiz = FALSE, inset = c(0, 0.1))
# Build dataset (just copy and paste, this is NOT interesting)
sample <- paste(rep("sample_",24) , seq(1,24) , sep="")
specie <- c(rep("dicoccoides" , 8) , rep("dicoccum" , 8) , rep("durum" , 8))
treatment <- rep(c(rep("High",4 ) , rep("Low",4)),3)
data <- data.frame(sample,specie,treatment)
for (i in seq(1:5)){
gene=sample(c(1:40) , 24 )
data=cbind(data , gene)
colnames(data)[ncol(data)]=paste("gene_",i,sep="")
}
data[data$treatment=="High" , c(4:8)]=data[data$treatment=="High" , c(4:8)]+100
data[data$specie=="durum" , c(4:8)]=data[data$specie=="durum" , c(4:8)]-30
rownames(data) <- data[,1]
# Have a look to the dataset
# head(data)
# Compute Euclidean distance between samples
dist=dist(data[ , c(4:8)] , diag=TRUE)
# Perfor clustering with hclust
hc <- hclust(dist)
dhc <- as.dendrogram(hc)
# Actually, each leaf of the tree has several attributes, like the color, the shape.. Have a look to it:
specific_leaf <- dhc[[1]][[1]][[1]]
# specific_leaf
# attributes(specific_leaf)
#So if I Want to color each leaf of the Tree, I have to change the attribute of each leaf. This can be done using the dendrapply function. So I create a function that # # add 3 attributes to the leaf : one for the color (“lab.col”) ,one for the font “lab.font” and one for the size (“lab.cex”).
i=0
colLab<<-function(n){
if(is.leaf(n)){
#I take the current attributes
a=attributes(n)
#I deduce the line in the original data, and so the treatment and the specie.
ligne=match(attributes(n)$label,data[,1])
treatment=data[ligne,3];
if(treatment=="Low"){col_treatment="blue"};if(treatment=="High"){col_treatment="red"}
specie=data[ligne,2];
if(specie=="dicoccoides"){col_specie="red"};if(specie=="dicoccum"){col_specie="Darkgreen"};if(specie=="durum"){col_specie="blue"}
#Modification of leaf attribute
attr(n,"nodePar")<-c(a$nodePar,list(cex=1.5,lab.cex=1,pch=20,col=col_treatment,lab.col=col_specie,lab.font=1,lab.cex=1))
}
return(n)
}
# Finally I just have to apply this to my dendrogram
dL <- dendrapply(dhc, colLab)
# And the plot
plot(dL , main="structure of the population")
legend("topright",
legend = c("High Nitrogen" , "Low Nitrogen" , "Durum" , "Dicoccoides" , "Dicoccum"),
col = c("red", "blue" , "blue" , "red" , "Darkgreen"),
pch = c(20,20,4,4,4), bty = "n",  pt.cex = 1.5, cex = 0.8 ,
text.col = "black", horiz = FALSE, inset = c(0, 0.1))
# Margins area
par(oma=c(3,3,3,3)) # all sides have 3 lines of space
par(mar=c(5,4,4,2) + 0.1)
# Plot  
plot(0:10, 0:10, type="n", xlab="X", ylab="Y")    # type="n" hides the points  
# Place text in the plot and color everything plot-related red  
text(5,5, "Plot", col="red", cex=2)  
par(oma=c(3,3,3,3)) # all sides have 3 lines of space
par(mar=c(5,4,4,2) + 0.1)
# Plot  
plot(0:10, 0:10, type="n", xlab="X", ylab="Y")    # type="n" hides the points  
 
# Place text in the plot and color everything plot-related red  
text(5,5, "Plot", col="red", cex=2)  
box("plot area", col="red")  
# Margins area
par(oma=c(3,3,3,3)) # all sides have 3 lines of space
par(mar=c(5,4,4,2) + 0.1)
# Plot
plot(0:10, 0:10, type="n", xlab="X", ylab="Y") # type="n" hides the points
# Margins area
par(oma=c(3,3,3,3)) # all sides have 3 lines of space
par(mar=c(5,4,4,2) + 0.1)
# Plot
plot(0:10, 0:10, type="n", xlab="X", ylab="Y") # type="n" hides the points
# Place text in the plot and color everything plot-related red
text(5,5, "Plot", col="red", cex=2)
box("plot area", col="red")
box
box(col="red")
# Plot
plot(0:10, 0:10, type="n", xlab="X", ylab="Y") # type="n" hides the points
# Place text in the plot and color everything plot-related red
text(5,5, "Plot", col="red", cex=2)
box(col="red")
# Margins area
par(oma=c(3,3,3,3)) # all sides have 3 lines of space
par(mar=c(5,4,4,2) + 0.1)
# Plot
plot(0:10, 0:10, type="n", xlab="X", ylab="Y") # type="n" hides the points
# Place text in the plot and color everything plot-related red
text(5,5, "Plot", col="red", cex=2)
box(col="red")
# Place text in the margins and label the margins, all in forestgreen  
mtext("Margins", side=3, line=2, cex=2, col="forestgreen")  
mtext("par(mar=c(b,l,t,r))", side=3, line=1, cex=1, col="forestgreen")  
mtext("Line 0", side=3, line=0, adj=1.0, cex=1, col="forestgreen")  
mtext("Line 1", side=3, line=1, adj=1.0, cex=1, col="forestgreen")  
mtext("Line 2", side=3, line=2, adj=1.0, cex=1, col="forestgreen")  
mtext("Line 3", side=3, line=3, adj=1.0, cex=1, col="forestgreen")  
box("figure", col="forestgreen")  
 
# Label the outer margin area and color it blue  
# Note the 'outer=TRUE' command moves us from the figure margins to the outer margins.  
mtext("Outer Margin Area", side=1, line=1, cex=2, col="blue", outer=TRUE)  
mtext("par(oma=c(b,l,t,r))", side=1, line=2, cex=1, col="blue", outer=TRUE)  
mtext("Line 0", side=1, line=0, adj=0.0, cex=1, col="blue", outer=TRUE)  
mtext("Line 1", side=1, line=1, adj=0.0, cex=1, col="blue", outer=TRUE)  
mtext("Line 2", side=1, line=2, adj=0.0, cex=1, col="blue", outer=TRUE)  
box("outer", col="blue")  
# Library rgl
library(rgl)
install.packages("rgl")
# Library rgl
library(rgl)
install.packages("rgl")
install.packages("rgl")
library(rgl)
# Library rgl
library(rgl)
#Choose the size of the image on the output (800,650 to have 800 x 600)
r3dDefaults$windowRect <- c(0,50, 800, 650)
open3d()
library(rgl)
#Choose the size of the image on the output (800,650 to have 800 x 600)
r3dDefaults$windowRect <- c(0,50, 800, 650)
open3d()
#If you want to put line on the background
#bg3d(sphere = TRUE, color = c("grey", "white"), lit = TRUE, back = "lines" ,lwd=2)
# plot
bg3d(col=rgb(0.2,0.8,0.5,0.8))
theta <- seq(0, 2*pi, len = 50)
knot <- cylinder3d(
center = cbind(sin(theta) + 3*sin(2*theta), 2*sin(3*theta), cos(theta) - 2*cos(2*theta)),
e1 = cbind(cos(theta) + 4*cos(2*theta),6*cos(3*theta),sin(theta) + 4*sin(2*theta)),radius = 0.9,closed = TRUE)
shade3d(addNormals(subdivision3d(knot, depth = 2)), col = rgb(0.4,0.2,0.8,0.3))
# Library rgl
library(rgl)
#Choose the size of the image on the output (800,650 to have 800 x 600)
r3dDefaults$windowRect <- c(0,50, 800, 650)
open3d()
#If you want to put line on the background
#bg3d(sphere = TRUE, color = c("grey", "white"), lit = TRUE, back = "lines" ,lwd=2)
# plot
bg3d(col=rgb(0.2,0.8,0.5,0.8))
theta <- seq(0, 2*pi, len = 50)
knot <- cylinder3d(
center = cbind(sin(theta) + 3*sin(2*theta), 2*sin(3*theta), cos(theta) - 2*cos(2*theta)),
e1 = cbind(cos(theta) + 4*cos(2*theta),6*cos(3*theta),sin(theta) + 4*sin(2*theta)),radius = 0.9,closed = TRUE)
shade3d(addNormals(subdivision3d(knot, depth = 2)), col = rgb(0.4,0.2,0.8,0.3))
# save it as png
rgl.snapshot( "~/Desktop/#20_portfolio_knot_3D.png", fmt="png", top=TRUE  )
# Geospatial data available at the geojson format
library(geojsonio)
spdf <- geojson_read("https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/communes.geojson",  what = "sp")
# Since it is a bit to much data, I select only a subset of it:
spdf <- spdf[ substr(spdf@data$code,1,2)  %in% c("06", "83", "13", "30", "34", "11", "66") , ]
#plot(spdf)
# I need to fortify the data AND keep trace of the commune code! (Takes ~2 minutes)
library(broom)
spdf_fortified <- tidy(spdf, region = "code")
# Now I can plot this shape easily as described before:
library(ggplot2)
ggplot() +
geom_polygon(data = spdf_fortified, aes( x = long, y = lat, group = group), fill="white", color="grey") +
theme_void() +
coord_map()
setwd("~/Desktop/Mortality/DATA")
# Libraries
library(dplyr)
library(tidyr)
library(jsonlite)
# Lost Years of Life = LYL File
LYL <- read.table("LYL.txt", header=T)
#improve colnames
colnames(LYL) <- c("mentalDis", "COD", "sex", "n", "LYL")
# Circulatory Diseases, not heart disease or something like that
LYL$COD <- gsub("Dis. Circulatory System", "Circulatory Diseases", LYL$COD)
# Save this long format
tosave <- paste("data_LYL_long = ", toJSON(LYL))
fileConn<-file("LYLlong.js")
writeLines(tosave, fileConn)
close(fileConn)
# get a wide format
wide <- LYL %>%
filter(n>3) %>%
select(mentalDis, sex, COD, LYL) %>%
spread(COD, LYL, -4, fill=NA)
tosave <- paste("data_LYL = ", toJSON(wide))
fileConn<-file("LYL.js")
writeLines(tosave, fileConn)
close(fileConn)
# Mortality Rate ratio = MRR. It compares the number of death with or without mental disorder. If > 1 -> people with a mental disorder dye more often.
MRR <- read.table("MRR.txt", header=T)
clean <- MRR %>%
filter(!is.na(MRR)) %>%
select(sex, dx2, cod_label, MRR, MRR_left, MRR_right)
colnames(clean) <- c("sex", "mentalDis", "COD", "MRR", "MRR_left", "MRR_right")
# Special case for circulatory diseases
clean$COD <- gsub("Dis. Circulatory System", "Circulatory Diseases", clean$COD)
# Same for substance use
# clean$mentalDis <- gsub("Substance Use", "Substance Use Disorders", clean$mentalDis)
#save
tosave <- paste("data_MRR = ", toJSON(clean))
fileConn<-file("MRR.js")
writeLines(tosave, fileConn)
close(fileConn)
# MRR age -> Same thing but split by age Range.
# This part is tricky since Oleguer Organized the data on a weird manner. We have to proceed step by step:
MRRage <- read.table("MRR_age.txt", header=T)
# part 1 -> overall plot -> MR = “Persons”, MRR = “Persons (M)”.
a <- MRRage %>%
filter(dx2 == "Any Disorder" & cod_label == "All Causes" & sex2 == "Persons") %>%
select(dx2, cod_label, sex2, specific, diagnosed, diag_left, diag_right, undiagnosed, undiag_left, undiag_right) %>%
arrange(specific)
b <- MRRage %>%
filter(dx2 == "Any Disorder" & cod_label == "All Causes" & sex2 == "Persons (M)") %>%
arrange(specific) %>%
select(irr, left, right)
A <- cbind(a,b) %>% mutate(type = "Global")
# part 2 -> Split by Sex -> “Males” and “Females” for both MR and MRR
B <- MRRage %>%
filter(dx2 == "Any Disorder" & cod_label == "All Causes" & ( sex2 == "Males" | sex2 == "Females")) %>%
select(dx2, cod_label, sex2, specific, diagnosed, diag_left, diag_right, undiagnosed, undiag_left, undiag_right, irr, left, right) %>%
arrange(specific) %>%
mutate(type = "SEXspecific")
# part 3 -> Split by COD -> MR = “Persons”, MRR = “Persons (M)”.
a <- MRRage %>%
filter(dx2 == "Any Disorder" & (cod_label == "Natural Causes" | cod_label == "Unnatural Causes") & sex2 == "Persons") %>%
select(dx2, cod_label, sex2, specific, diagnosed, diag_left, diag_right, undiagnosed, undiag_left, undiag_right) %>%
arrange(specific)
b <- MRRage %>%
filter(dx2 == "Any Disorder" & (cod_label == "Natural Causes" | cod_label == "Unnatural Causes") & sex2 == "Persons (M)") %>%
arrange(specific) %>%
select(irr, left, right)
C <- cbind(a,b) %>% mutate(type = "CODspecific")
# Put them together
clean <- rbind(A,B,C)
tosave <- paste("data_MRRage = ", toJSON(clean))
fileConn<-file("MRRage.js")
writeLines(tosave, fileConn)
close(fileConn)
load("~/Dropbox/QBI/15_ABDEL_UKB_MAP/UKB_geo_application/DATA/Map_data.Rdata")
load("~/Desktop/UKB_geo_application/DATA/Map_data.Rdata")
ls()
rm(list=ls())
ls()
load("~/Desktop/UKB_geo_application/DATA/Map_data.Rdata")
ls()
head(GBR_dist.bng)
plot(GBR_dist.bng)
ls()
plot(UKB_hexa.bng)
input <- read.table("~/Desktop/TEMP_ABDEL/UKB.geowebsite.individual_level.polygenic_scores.100PCs.10kref.csv.gz", header=T, sep=",")
input <- read.table("~/Desktop/ABDEL_DATA/UKB.geowebsite.individual_level.polygenic_scores.100PCs.10kref.csv.gz", header=T, sep=",")
input <- read.table("UKB.geowebsite.individual_level.polygenic_scores.100PCs.10kref.REVISION.csv", header=T, sep=",", nrows=100)
input <- read.table("~/Desktop/ABDEL_DATA/UKB.geowebsite.individual_level.polygenic_scores.100PCs.10kref.REVISION.csv", header=T, sep=",", nrows=100)
input=na.omit(input)
output="~/Desktop/UKB_geo_application/DATA/Abdel_data.Rdata"
compute_shape_sumstat = function(input, output){
##############################
# ENVIRONMENT
##############################
# libraries
library(sp)
library(devtools)
library(dplyr)
library(stringr)
library(maps)
library(mapdata)
library(rgdal)
library(lattice)
library(spdep)
library(rgeos)
library(cartogram)
incProgress(0.1, detail = "Start linking with regions")
################################################################
# PART X - LINK SPATIAL / INDIVIDUAL
################################################################
#turn into SpatialObject
coordinates(input) <- c("longitude","latitude")
# assign projection to UKB
bng = '+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +datum=OSGB36 +units=m +no_defs'
proj4string(input) <- bng
# ----------- REGION LARGE ---------------------------
# aggregate polygenic scores, PCs, and residuals by each UK region of the initial shape file.
GBR_dist.UKB.over <- over(GBR_dist.bng, input, fn = mean)
# I need to add the number of person per region!
GBR_dist.UKB.over$nb_people <- over(GBR_dist.bng, input, fn = length)[,1]
# clean format + add the geolabel column + use the good projection
GBR_region = SpatialPolygonsDataFrame(GBR_dist.bng, data=GBR_dist.UKB.over)
GBR_region@data$geo_label = GBR_dist.bng@data$geo_label
GBR_region= spTransform(GBR_region, CRS("+proj=longlat +datum=WGS84 +no_defs"))
incProgress(0.1, detail = "Aggregation to region OK")
# ----------- HEXAGONE---------------------------
# aggregate polygenic scores, PCs, and residuals by each UK region of the initial shape file.
UKB_hexa.bng.over <- over(UKB_hexa.bng, input, fn = mean)
# I need to add the number of person per region!
UKB_hexa.bng.over$nb_people <- over(UKB_hexa.bng, input, fn = length)[,1]
# clean format + add the geolabel column + use the good projection
GBR_hexa = SpatialPolygonsDataFrame(UKB_hexa.bng, data=UKB_hexa.bng.over)
GBR_hexa@data$geo_label = UKB_hexa.bng@data$LAD12NM
GBR_hexa = spTransform(GBR_hexa, CRS("+proj=longlat +datum=WGS84 +no_defs"))
incProgress(0.1, detail = "Aggregation to hexagone OK")
################################################################
# PART X - CARTOGRAM CREATION
################################################################
# This part is going to create the same object, but transforming the shapes proportionnaly of the number of people into them
# ----------- REGION LARGE ---------------------------
GBR_region_cartogram = cartogram(GBR_region, "nb_people", itermax=1)
incProgress(0.1, detail = "Cartogram region OK")
# ----------- HEXAGONE ---------------------------
GBR_hexa_cartogram = cartogram(GBR_hexa, "nb_people", itermax=1)
incProgress(0.1, detail = "Cartogram hexagone OK")
################################################################
# PART X - SAVE OBJECTS
################################################################
# Just return the objects if this is done on user data
return( list(GBR_region, GBR_region_cartogram, GBR_hexa, GBR_hexa_cartogram) )
}
##############################
# ENVIRONMENT
##############################
# libraries
library(sp)
library(devtools)
library(dplyr)
library(stringr)
library(maps)
library(mapdata)
library(rgdal)
library(lattice)
library(spdep)
library(rgeos)
library(cartogram)
incProgress(0.1, detail = "Start linking with regions")
#turn into SpatialObject
coordinates(input) <- c("longitude","latitude")
# assign projection to UKB
bng = '+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +datum=OSGB36 +units=m +no_defs'
proj4string(input) <- bng
# aggregate polygenic scores, PCs, and residuals by each UK region of the initial shape file.
GBR_dist.UKB.over <- over(GBR_dist.bng, input, fn = mean)
# I need to add the number of person per region!
GBR_dist.UKB.over$nb_people <- over(GBR_dist.bng, input, fn = length)[,1]
# clean format + add the geolabel column + use the good projection
GBR_region = SpatialPolygonsDataFrame(GBR_dist.bng, data=GBR_dist.UKB.over)
GBR_region@data$geo_label = GBR_dist.bng@data$geo_label
GBR_region= spTransform(GBR_region, CRS("+proj=longlat +datum=WGS84 +no_defs"))
# aggregate polygenic scores, PCs, and residuals by each UK region of the initial shape file.
UKB_hexa.bng.over <- over(UKB_hexa.bng, input, fn = mean)
# I need to add the number of person per region!
UKB_hexa.bng.over$nb_people <- over(UKB_hexa.bng, input, fn = length)[,1]
# clean format + add the geolabel column + use the good projection
GBR_hexa = SpatialPolygonsDataFrame(UKB_hexa.bng, data=UKB_hexa.bng.over)
GBR_hexa@data$geo_label = UKB_hexa.bng@data$LAD12NM
GBR_hexa = spTransform(GBR_hexa, CRS("+proj=longlat +datum=WGS84 +no_defs"))
# ----------- REGION LARGE ---------------------------
GBR_region_cartogram = cartogram(GBR_region, "nb_people", itermax=1)
incProgress(0.1, detail = "Cartogram region OK")
# ----------- HEXAGONE ---------------------------
GBR_hexa_cartogram = cartogram(GBR_hexa, "nb_people", itermax=1)
save(GBR_region, GBR_region_cartogram, GBR_hexa, GBR_hexa_cartogram, file=output)
rm(list=ls())
load("~/Desktop/UKB_geo_application/DATA/Map_data.Rdata")
input <- read.table("~/Desktop/ABDEL_DATA/UKB.geowebsite.individual_level.polygenic_scores.100PCs.10kref.REVISION.csv", header=T, sep=",")
output="~/Desktop/UKB_geo_application/DATA/Abdel_data.Rdata"
##############################
# ENVIRONMENT
##############################
# libraries
library(sp)
library(devtools)
library(dplyr)
library(stringr)
library(maps)
library(mapdata)
library(rgdal)
library(lattice)
library(spdep)
library(rgeos)
library(cartogram)
#turn into SpatialObject
coordinates(input) <- c("longitude","latitude")
# assign projection to UKB
bng = '+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +datum=OSGB36 +units=m +no_defs'
proj4string(input) <- bng
# ----------- REGION LARGE ---------------------------
# aggregate polygenic scores, PCs, and residuals by each UK region of the initial shape file.
GBR_dist.UKB.over <- over(GBR_dist.bng, input, fn = mean)
# I need to add the number of person per region!
GBR_dist.UKB.over$nb_people <- over(GBR_dist.bng, input, fn = length)[,1]
# clean format + add the geolabel column + use the good projection
GBR_region = SpatialPolygonsDataFrame(GBR_dist.bng, data=GBR_dist.UKB.over)
GBR_region@data$geo_label = GBR_dist.bng@data$geo_label
GBR_region= spTransform(GBR_region, CRS("+proj=longlat +datum=WGS84 +no_defs"))
# aggregate polygenic scores, PCs, and residuals by each UK region of the initial shape file.
UKB_hexa.bng.over <- over(UKB_hexa.bng, input, fn = mean)
# I need to add the number of person per region!
UKB_hexa.bng.over$nb_people <- over(UKB_hexa.bng, input, fn = length)[,1]
# clean format + add the geolabel column + use the good projection
GBR_hexa = SpatialPolygonsDataFrame(UKB_hexa.bng, data=UKB_hexa.bng.over)
GBR_hexa@data$geo_label = UKB_hexa.bng@data$LAD12NM
GBR_hexa = spTransform(GBR_hexa, CRS("+proj=longlat +datum=WGS84 +no_defs"))
# ----------- REGION LARGE ---------------------------
GBR_region_cartogram = cartogram(GBR_region, "nb_people", itermax=1)
# ----------- REGION LARGE ---------------------------
GBR_region_cartogram = cartogram(GBR_region, "nb_people", itermax=5)
# ----------- HEXAGONE ---------------------------
GBR_hexa_cartogram = cartogram(GBR_hexa, "nb_people", itermax=5)
save(GBR_region, GBR_region_cartogram, GBR_hexa, GBR_hexa_cartogram, file=output)
