#Create a theme
mytheme =  theme(
legend.position="none",
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(size=14),
axis.ticks.x = element_line(),
axis.title.x = element_text(size=16),
axis.line = element_blank(),
plot.margin = unit(rep(.3 ,4), "cm")
)
# Maximum?
mymax=max(c(tmp$Upper.CL.x, tmp$Upper.CL.y))
mydisease = "Major depressive episode"
# p1
mytitle=paste( mydisease, " as a later-disorder.", sep="")
p1 <- ggplot(tmp, aes(x=Later.disorder, y=HR.y, fill=Later.disorder)) +
geom_bar(stat="identity") +
geom_errorbar( aes(ymin=Lower.CL.y, ymax=Upper.CL.y), width=0.3 ) +
coord_flip() +
ylim(0, mymax) +
scale_fill_viridis(discrete=TRUE) +
theme_classic() +
ylab("Hazard Ratio") +
mytheme +
ggtitle(bquote(italic(.(mytitle)))) +
theme( plot.title = element_text(color="grey", size=15, hjust=0.5))
# p2
mytitle=paste( mydisease, " as a prior-disorder.", sep="")
p2 <- ggplot(tmp, aes(x=Later.disorder, y=HR.x, fill=Later.disorder)) +
geom_bar(stat="identity") +
geom_errorbar( aes(ymin=Lower.CL.x, ymax=Upper.CL.x), width=0.3 ) +
scale_y_reverse() +
ylim(mymax, 0) +
coord_flip() +
scale_fill_viridis(discrete=TRUE) +
theme_classic() +
ylab("Hazard Ratio") +
mytheme +
ggtitle(bquote(italic(.(mytitle)))) +
theme( plot.title = element_text(color="grey", size=15, hjust=0.5))
p3 = ggplot(tmp, aes(x=Later.disorder, y=-100)) +
geom_text( aes(label=gsub(" ","\n", Later.disorder)), size=5) +
coord_flip() +
theme_classic() +
ylab("Hazard Ratio") +
mytheme +
theme(
axis.ticks.x = element_line(color="white"),
axis.title.x = element_text(color="white"),
axis.text.x = element_text(color="white"),
plot.margin = unit(c(.9 ,.3, .3, .3), "cm")
)
# Arrange and display the plots into a 2x1 grid
title=textGrob(mydisease,gp=gpar(fontsize=20,font=2))
grid.arrange( p2, p3, p1, ncol=3 , widths=c(0.41, 0.18,  0.41) , top = title )
#ggsave(p, file="symBarPaper.eps")
ggplot(tmp, aes(x=Later.disorder, y=HR.x, fill=Later.disorder)) +
geom_bar(stat="identity") +
geom_errorbar( aes(ymin=Lower.CL.x, ymax=Upper.CL.x), width=0.3 ) +
scale_y_reverse() +
ylim(mymax, 0) +
coord_flip() +
scale_fill_viridis(discrete=TRUE) +
theme_classic() +
ylab("Hazard Ratio")
mymax
tmp$Upper.CL.x
# Maximum?
mymax=max(c(tmp$Upper.CL.x, tmp$Upper.CL.y), na.rm=T)
mymax
library(ggplot2)
library(hrbrthemes)
ggplot(iris, aes(x=P))
iris
head(iris)
ggplot( iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point()
ggplot( iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point() + scale_color_ipsum()
ggplot( iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + geom_point() + scale_color_ipsum()
ggplot( iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + geom_point(size=12) + scale_color_ipsum()
1+1
library(devtools)
install_github("holtzy/epuRate")
library(epuRate)
# Libraries
library(plotly)
library(tidyverse)
# Prepare the dataset
don <- gwasResults %>%
# Compute chromosome size
group_by(CHR) %>%
summarise(chr_len=max(BP)) %>%
# Calculate cumulative position of each chromosome
mutate(tot=cumsum(chr_len)-chr_len) %>%
select(-chr_len) %>%
# Add this info to the initial dataset
left_join(gwasResults, ., by=c("CHR"="CHR")) %>%
# Add a cumulative position of each SNP
arrange(CHR, BP) %>%
mutate( BPcum=BP+tot) %>%
# Add highlight and annotation information
mutate( is_highlight=ifelse(SNP %in% snpsOfInterest, "yes", "no")) %>%
# Filter SNP to make the plot lighter
filter(-log10(P)>0.5)
# You need these libraries to run this template:
library(rmarkdown)    # install.packages("rmarkdown")
library(epuRate)      # devtools::install_github("holtzy/epuRate", force=TRUE)
library(qqman)
library(DT)
datatable(gwasResults, rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T) )
# Libraries
library(plotly)
library(tidyverse)
# Prepare the dataset
don <- gwasResults %>%
# Compute chromosome size
group_by(CHR) %>%
summarise(chr_len=max(BP)) %>%
# Calculate cumulative position of each chromosome
mutate(tot=cumsum(chr_len)-chr_len) %>%
select(-chr_len) %>%
# Add this info to the initial dataset
left_join(gwasResults, ., by=c("CHR"="CHR")) %>%
# Add a cumulative position of each SNP
arrange(CHR, BP) %>%
mutate( BPcum=BP+tot) %>%
# Add highlight and annotation information
mutate( is_highlight=ifelse(SNP %in% snpsOfInterest, "yes", "no")) %>%
# Filter SNP to make the plot lighter
filter(-log10(P)>0.5)
# Prepare X axis
axisdf <- don %>% group_by(CHR) %>% summarize(center=( max(BPcum) + min(BPcum) ) / 2 )
# Prepare text description for each SNP:
don$text <- paste("SNP: ", don$SNP, "\nPosition: ", don$BP, "\nChromosome: ", don$CHR, "\nLOD score:", -log10(don$P) %>% round(2), "\nWhat else do you wanna know", sep="")
don
1+1
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
summary(cars)
1+1
getwd()
setwd("/Users/y.holtz/Documents/Mortality/DATA")
# Step 1: Read input files
LYL <- read.table("LYL.txt", header=T)
LYL
# LYL File
LYL <- read.table("LYL.txt", header=T)
toJSON(LYL)
library(jsonlite)
toJSON(LYL)
fileConn<-file("LYL.js")
writeLines(tosave, fileConn)
# LYL File
LYL <- read.table("LYL.txt", header=T)
tosave <- toJSON(LYL)
fileConn<-file("LYL.js")
writeLines(tosave, fileConn)
close(fileConn)
LYL
unique(LYL$dx2)
unique(LYL$cod_label)
# get a wide format
LYL
# get a wide format
LYL %>%
filter(cases>3)
# Libraries
library(dplyr)
library(tidyr)
library(jsonlite)
# LYL File
LYL <- read.table("LYL.txt", header=T)
# get a wide format
LYL %>%
filter(cases>3)
# get a wide format
LYL %>%
filter(cases>3) %>%
spread(cod_label, LYL)
# get a wide format
LYL %>% head
# get a wide format
LYL %>%
filter(cases>3) %>%
spread(cod_label, LYL, -c("cases"))
# get a wide format
LYL %>%
filter(cases>3) %>%
spread(cod_label, LYL, -"cases")
# get a wide format
LYL %>%
filter(cases>3) %>%
spread(cod_label, LYL, -cases)
spread
# get a wide format
LYL %>%
filter(cases>3) %>%
spread(cod_label, LYL, -4)
# get a wide format
LYL %>%
filter(cases>3) %>%
select(dx2, sex, LYL)
# get a wide format
LYL %>%
filter(cases>3) %>%
select(dx2, cod_label, LYL)
LYL %>%
filter(cases>3) %>%
select(dx2, cod_label, LYL)
# get a wide format
LYL %>%
filter(cases>3) %>%
select(dx2, cod_label, LYL) %>%
spread(cod_label, LYL, -4)
LYL %>%
filter(cases>3) %>%
select(dx2, cod_label, LYL)
# get a wide format
LYL %>%
filter(cases>3) %>%
select(dx2, sex, cod_label, LYL) %>%
spread(cod_label, LYL, -4)
# LYL File
LYL <- read.table("LYL.txt", header=T)
# get a wide format
wide <- LYL %>%
filter(cases>3) %>%
select(dx2, sex, cod_label, LYL) %>%
spread(cod_label, LYL, -4)
tosave <- toJSON(wide)
fileConn<-file("LYL.js")
writeLines(tosave, fileConn)
close(fileConn)
tosave
# LYL File
LYL <- read.table("LYL.txt", header=T)
# get a wide format
wide <- LYL %>%
filter(cases>3) %>%
select(dx2, sex, cod_label, LYL) %>%
spread(cod_label, LYL, -4)
tosave <- paste("data = ", toJSON(wide))
fileConn<-file("LYL.js")
writeLines(tosave, fileConn)
close(fileConn)
####
# Data Preparation
#
# This R script reads data sent by Oleguer and create all the inputs for the d3.js charts
#
# Run it with --> Rscript data_preparation.R
###
## setwd("/Users/y.holtz/Documents/Mortality/DATA")
# Libraries
library(dplyr)
library(tidyr)
library(jsonlite)
# LYL File
LYL <- read.table("LYL.txt", header=T)
# get a wide format
wide <- LYL %>%
filter(cases>3) %>%
select(dx2, sex, cod_label, LYL) %>%
spread(cod_label, LYL, -4)
tosave <- paste("data = ", toJSON(wide))
fileConn<-file("data_LYL.js")
writeLines(tosave, fileConn)
close(fileConn)
LYL <- read.table("LYL.txt", header=T)
# get a wide format
wide <- LYL %>%
filter(cases>3) %>%
select(dx2, sex, cod_label, LYL) %>%
spread(cod_label, LYL, -4)
tosave <- paste("data_LYL = ", toJSON(wide))
fileConn<-file("LYL.js")
writeLines(tosave, fileConn)
close(fileConn)
# LYL File
LYL <- read.table("LYL.txt", header=T)
# get a wide format
wide <- LYL %>%
filter(cases>3) %>%
select(dx2, sex, cod_label, LYL) %>%
spread(cod_label, LYL, -4)
tosave <- paste("data_LYL = ", toJSON(wide))
fileConn<-file("LYL.js")
writeLines(tosave, fileConn)
close(fileConn)
#improve colnames
LYL
#improve colnames
colnames(LYL)
# LYL File
LYL <- read.table("LYL.txt", header=T)
#improve colnames
colnames(LYL) <- c("mentalDis", "COD", "sex", "n", "LYL")
# get a wide format
wide <- LYL %>%
filter(cases>3) %>%
select(dx2, sex, cod_label, LYL) %>%
spread(cod_label, LYL, -4)
tosave <- paste("data_LYL = ", toJSON(wide))
fileConn<-file("LYL.js")
writeLines(tosave, fileConn)
close(fileConn)
# LYL File
LYL <- read.table("LYL.txt", header=T)
#improve colnames
colnames(LYL) <- c("mentalDis", "COD", "sex", "n", "LYL")
# get a wide format
wide <- LYL %>%
filter(n>3) %>%
select(dx2, sex, cod_label, LYL) %>%
spread(cod_label, LYL, -4)
tosave <- paste("data_LYL = ", toJSON(wide))
fileConn<-file("LYL.js")
writeLines(tosave, fileConn)
close(fileConn)
# get a wide format
wide <- LYL %>%
filter(n>3) %>%
select(mentalDis, sex, COD, LYL) %>%
spread(cod_label, LYL, -4)
# LYL File
LYL <- read.table("LYL.txt", header=T)
#improve colnames
colnames(LYL) <- c("mentalDis", "COD", "sex", "n", "LYL")
# get a wide format
wide <- LYL %>%
filter(n>3) %>%
select(mentalDis, sex, COD, LYL) %>%
spread(COD, LYL, -4)
tosave <- paste("data_LYL = ", toJSON(wide))
fileConn<-file("LYL.js")
writeLines(tosave, fileConn)
close(fileConn)
wide
# get a wide format
wide <- LYL %>%
filter(n>3) %>%
select(mentalDis, sex, COD, LYL) %>%
spread(COD, LYL, -4, fill=0)
wide
library(jsonlite)
# LYL File
LYL <- read.table("LYL.txt", header=T)
#improve colnames
colnames(LYL) <- c("mentalDis", "COD", "sex", "n", "LYL")
# get a wide format
wide <- LYL %>%
filter(n>3) %>%
select(mentalDis, sex, COD, LYL) %>%
spread(COD, LYL, -4, fill="-")
tosave <- paste("data_LYL = ", toJSON(wide))
fileConn<-file("LYL.js")
writeLines(tosave, fileConn)
close(fileConn)
wide
# LYL File
LYL <- read.table("LYL.txt", header=T)
#improve colnames
colnames(LYL) <- c("mentalDis", "COD", "sex", "n", "LYL")
# get a wide format
wide <- LYL %>%
filter(n>3) %>%
filter(COD!="All Causes")
select(mentalDis, sex, COD, LYL) %>%
spread(COD, LYL, -4, fill="-")
# LYL File
LYL <- read.table("LYL.txt", header=T)
#improve colnames
colnames(LYL) <- c("mentalDis", "COD", "sex", "n", "LYL")
# get a wide format
wide <- LYL %>%
filter(n>3) %>%
filter(COD!="All Causes")
select(mentalDis, sex, COD, LYL) %>%
spread(COD, LYL, -4, fill="-")
# LYL File
LYL <- read.table("LYL.txt", header=T)
#improve colnames
colnames(LYL) <- c("mentalDis", "COD", "sex", "n", "LYL")
# get a wide format
wide <- LYL %>%
filter(n>3) %>%
filter(COD!="All Causes")
select(mentalDis, sex, COD, LYL) %>%
spread(COD, LYL, -4, fill="-")
# LYL File
LYL <- read.table("LYL.txt", header=T)
#improve colnames
colnames(LYL) <- c("mentalDis", "COD", "sex", "n", "LYL")
# get a wide format
wide <- LYL %>%
filter(n>3) %>%
filter(COD!="All Causes")
select(mentalDis, sex, COD, LYL) %>%
spread(COD, LYL, -4, fill="-")
# LYL File
LYL <- read.table("LYL.txt", header=T)
#improve colnames
colnames(LYL) <- c("mentalDis", "COD", "sex", "n", "LYL")
# get a wide format
wide <- LYL %>%
filter(n>3) %>%
filter(COD!="All Causes")
select(mentalDis, sex, COD, LYL) %>%
spread(COD, LYL, -4, fill="-")
# LYL File
LYL <- read.table("LYL.txt", header=T)
#improve colnames
colnames(LYL) <- c("mentalDis", "COD", "sex", "n", "LYL")
# get a wide format
wide <- LYL %>%
filter(n>3) %>%
filter(COD!="All Causes")
select(mentalDis, sex, COD, LYL) %>%
spread(COD, LYL, -4, fill="-")
# LYL File
LYL <- read.table("LYL.txt", header=T)
#improve colnames
colnames(LYL) <- c("mentalDis", "COD", "sex", "n", "LYL")
# get a wide format
wide <- LYL %>%
filter(n>3) %>%
filter(COD!="All Causes")
select(mentalDis, sex, COD, LYL) %>%
spread(COD, LYL, -4, fill="-")
# LYL File
LYL <- read.table("LYL.txt", header=T)
#improve colnames
colnames(LYL) <- c("mentalDis", "COD", "sex", "n", "LYL")
# get a wide format
wide <- LYL %>%
filter(n>3) %>%
filter(COD!="All Causes")
select(mentalDis, sex, COD, LYL) %>%
spread(COD, LYL, -4, fill="-")
# LYL File
LYL <- read.table("LYL.txt", header=T)
#improve colnames
colnames(LYL) <- c("mentalDis", "COD", "sex", "n", "LYL")
# get a wide format
wide <- LYL %>%
filter(n>3) %>%
filter(COD!="All Causes")
select(mentalDis, sex, COD, LYL) %>%
spread(COD, LYL, -4, fill="-")
# get a wide format
wide <- LYL %>%
filter(n>3) %>%
filter(COD!="All Causes") %>%
select(mentalDis, sex, COD, LYL) %>%
spread(COD, LYL, -4, fill="-")
wide
# get a wide format
wide <- LYL %>%
filter(n>3) %>%
filter(COD!="All Causes") %>%
select(mentalDis, sex, COD, LYL) %>%
spread(COD, LYL, -4, fill=0)
wide
# Mortality Rate ratio = MRR
MRR <- read.table("MRR.txt", header=T)
MRR
# Mortality Rate ratio = MRR. It compares the number of death with or without mental disorder. If > 1 -> people with a mental disorder dye more often.
MRRage <- read.table("MRR_age.txt", header=T)
MRRage
MRR <- read.table("MRR.txt", header=T)
MRR
# Mortality Rate ratio = MRR. It compares the number of death with or without mental disorder. If > 1 -> people with a mental disorder dye more often.
MRR <- read.table("MRR.txt", header=T)
clean <- MRR %>%
filter(!is.na(MRR))
tosave <- paste("data_MRR = ", toJSON(clean))
fileConn<-file("MRR.js")
writeLines(tosave, fileConn)
close(fileConn)
MRRage
# MRR age -> Same thing but split by age Range
MRRage <- read.table("MRR_age.txt", header=T)
clean <- MRRage
tosave <- paste("data_MRRage = ", toJSON(clean))
fileConn<-file("MRRage.js")
writeLines(tosave, fileConn)
close(fileConn)
MRR
clean <- MRR %>%
filter(!is.na(MRR)) %>%
select(sex, dx2, cod_label, MRR, MRR_left, MRR_right)
colnames(clean) <- c("sex", "mentalDis", "COD", "MRR_left", "MRR_right")
tosave <- paste("data_MRR = ", toJSON(clean))
fileConn<-file("MRR.js")
writeLines(tosave, fileConn)
close(fileConn)
# Mortality Rate ratio = MRR. It compares the number of death with or without mental disorder. If > 1 -> people with a mental disorder dye more often.
MRR <- read.table("MRR.txt", header=T)
clean <- MRR %>%
filter(!is.na(MRR)) %>%
select(sex, dx2, cod_label, MRR, MRR_left, MRR_right)
clean
MRR <- read.table("MRR.txt", header=T)
clean <- MRR %>%
filter(!is.na(MRR)) %>%
select(sex, dx2, cod_label, MRR, MRR_left, MRR_right)
colnames(clean) <- c("sex", "mentalDis", "COD", "MRR", "MRR_left", "MRR_right")
tosave <- paste("data_MRR = ", toJSON(clean))
fileConn<-file("MRR.js")
writeLines(tosave, fileConn)
close(fileConn)
